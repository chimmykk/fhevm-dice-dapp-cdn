/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEDiceGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ENTRY_FEE"
      | "getLastDiceRoll"
      | "getPlayerGuess"
      | "getWinnerStatus"
      | "owner"
      | "playDice"
      | "protocolId"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ENTRY_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastDiceRoll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGuess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinnerStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playDice",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ENTRY_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastDiceRoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playDice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface FHEDiceGame extends BaseContract {
  connect(runner?: ContractRunner | null): FHEDiceGame;
  waitForDeployment(): Promise<this>;

  interface: FHEDiceGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ENTRY_FEE: TypedContractMethod<[], [bigint], "view">;

  getLastDiceRoll: TypedContractMethod<[], [string], "view">;

  getPlayerGuess: TypedContractMethod<[], [string], "view">;

  getWinnerStatus: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playDice: TypedContractMethod<
    [
      inputSeed: BytesLike,
      seedProof: BytesLike,
      inputGuess: BytesLike,
      guessProof: BytesLike
    ],
    [void],
    "payable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ENTRY_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastDiceRoll"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPlayerGuess"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWinnerStatus"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playDice"
  ): TypedContractMethod<
    [
      inputSeed: BytesLike,
      seedProof: BytesLike,
      inputGuess: BytesLike,
      guessProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
